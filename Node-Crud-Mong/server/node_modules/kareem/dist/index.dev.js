'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function Kareem() {
  this._pres = new Map();
  this._posts = new Map();
}

Kareem.skipWrappedFunction = function skipWrappedFunction() {
  if (!(this instanceof Kareem.skipWrappedFunction)) {
    return _construct(Kareem.skipWrappedFunction, Array.prototype.slice.call(arguments));
  }

  this.args = Array.prototype.slice.call(arguments);
};

Kareem.overwriteResult = function overwriteResult() {
  if (!(this instanceof Kareem.overwriteResult)) {
    return _construct(Kareem.overwriteResult, Array.prototype.slice.call(arguments));
  }

  this.args = Array.prototype.slice.call(arguments);
};

Kareem.prototype.execPre = function (name, context, args, callback) {
  if (arguments.length === 3) {
    callback = args;
    args = [];
  }

  var pres = this._pres.get(name) || [];
  var numPres = pres.length;
  var numAsyncPres = pres.numAsync || 0;
  var currentPre = 0;
  var asyncPresLeft = numAsyncPres;
  var done = false;
  var $args = args;
  var shouldSkipWrappedFunction = null;

  if (!numPres) {
    return nextTick(function () {
      callback(null);
    });
  }

  var next = function next() {
    if (currentPre >= numPres) {
      return;
    }

    var pre = pres[currentPre];

    if (pre.isAsync) {
      var args = [decorateNextFn(_next), decorateNextFn(function (error) {
        if (error) {
          if (done) {
            return;
          }

          if (error instanceof Kareem.skipWrappedFunction) {
            shouldSkipWrappedFunction = error;
          } else {
            done = true;
            return callback(error);
          }
        }

        if (--asyncPresLeft === 0 && currentPre >= numPres) {
          return callback(shouldSkipWrappedFunction);
        }
      })];
      callMiddlewareFunction(pre.fn, context, args, args[0]);
    } else if (pre.fn.length > 0) {
      var args = [decorateNextFn(_next)];

      var _args = arguments.length >= 2 ? arguments : [null].concat($args);

      for (var i = 1; i < _args.length; ++i) {
        args.push(_args[i]);
      }

      callMiddlewareFunction(pre.fn, context, args, args[0]);
    } else {
      var maybePromiseLike = null;

      try {
        maybePromiseLike = pre.fn.call(context);
      } catch (err) {
        if (err != null) {
          return callback(err);
        }
      }

      if (isPromiseLike(maybePromiseLike)) {
        maybePromiseLike.then(function () {
          return _next();
        }, function (err) {
          return _next(err);
        });
      } else {
        if (++currentPre >= numPres) {
          if (asyncPresLeft > 0) {
            // Leave parallel hooks to run
            return;
          } else {
            return nextTick(function () {
              callback(shouldSkipWrappedFunction);
            });
          }
        }

        next();
      }
    }
  };

  next.apply(null, [null].concat(args));

  function _next(error) {
    if (error) {
      if (done) {
        return;
      }

      if (error instanceof Kareem.skipWrappedFunction) {
        shouldSkipWrappedFunction = error;
      } else {
        done = true;
        return callback(error);
      }
    }

    if (++currentPre >= numPres) {
      if (asyncPresLeft > 0) {
        // Leave parallel hooks to run
        return;
      } else {
        return callback(shouldSkipWrappedFunction);
      }
    }

    next.apply(context, arguments);
  }
};

Kareem.prototype.execPreSync = function (name, context, args) {
  var pres = this._pres.get(name) || [];
  var numPres = pres.length;

  for (var i = 0; i < numPres; ++i) {
    pres[i].fn.apply(context, args || []);
  }
};

Kareem.prototype.execPost = function (name, context, args, options, callback) {
  if (arguments.length < 5) {
    callback = options;
    options = null;
  }

  var posts = this._posts.get(name) || [];
  var numPosts = posts.length;
  var currentPost = 0;
  var firstError = null;

  if (options && options.error) {
    firstError = options.error;
  }

  if (!numPosts) {
    return nextTick(function () {
      callback.apply(null, [firstError].concat(args));
    });
  }

  var next = function next() {
    var post = posts[currentPost].fn;
    var numArgs = 0;
    var argLength = args.length;
    var newArgs = [];

    for (var i = 0; i < argLength; ++i) {
      numArgs += args[i] && args[i]._kareemIgnore ? 0 : 1;

      if (!args[i] || !args[i]._kareemIgnore) {
        newArgs.push(args[i]);
      }
    }

    if (firstError) {
      if (post.length === numArgs + 2) {
        var _cb = decorateNextFn(function (error) {
          if (error) {
            if (error instanceof Kareem.overwriteResult) {
              args = error.args;

              if (++currentPost >= numPosts) {
                return callback.call(null, firstError);
              }

              return next();
            }

            firstError = error;
          }

          if (++currentPost >= numPosts) {
            return callback.call(null, firstError);
          }

          next();
        });

        callMiddlewareFunction(post, context, [firstError].concat(newArgs).concat([_cb]), _cb);
      } else {
        if (++currentPost >= numPosts) {
          return callback.call(null, firstError);
        }

        next();
      }
    } else {
      var _cb2 = decorateNextFn(function (error) {
        if (error) {
          if (error instanceof Kareem.overwriteResult) {
            args = error.args;

            if (++currentPost >= numPosts) {
              return callback.apply(null, [null].concat(args));
            }

            return next();
          }

          firstError = error;
          return next();
        }

        if (++currentPost >= numPosts) {
          return callback.apply(null, [null].concat(args));
        }

        next();
      });

      if (post.length === numArgs + 2) {
        // Skip error handlers if no error
        if (++currentPost >= numPosts) {
          return callback.apply(null, [null].concat(args));
        }

        return next();
      }

      if (post.length === numArgs + 1) {
        callMiddlewareFunction(post, context, newArgs.concat([_cb2]), _cb2);
      } else {
        var error;
        var maybePromiseLike;

        try {
          maybePromiseLike = post.apply(context, newArgs);
        } catch (err) {
          error = err;
          firstError = err;
        }

        if (isPromiseLike(maybePromiseLike)) {
          return maybePromiseLike.then(function (res) {
            _cb2(res instanceof Kareem.overwriteResult ? res : null);
          }, function (err) {
            return _cb2(err);
          });
        }

        if (maybePromiseLike instanceof Kareem.overwriteResult) {
          args = maybePromiseLike.args;
        }

        if (++currentPost >= numPosts) {
          return callback.apply(null, [error].concat(args));
        }

        next();
      }
    }
  };

  next();
};

Kareem.prototype.execPostSync = function (name, context, args) {
  var posts = this._posts.get(name) || [];
  var numPosts = posts.length;

  for (var i = 0; i < numPosts; ++i) {
    var res = posts[i].fn.apply(context, args || []);

    if (res instanceof Kareem.overwriteResult) {
      args = res.args;
    }
  }

  return args;
};

Kareem.prototype.createWrapperSync = function (name, fn) {
  var kareem = this;
  return function syncWrapper() {
    kareem.execPreSync(name, this, arguments);
    var toReturn = fn.apply(this, arguments);
    var result = kareem.execPostSync(name, this, [toReturn]);
    return result[0];
  };
};

function _handleWrapError(instance, error, name, context, args, options, callback) {
  if (options.useErrorHandlers) {
    return instance.execPost(name, context, args, {
      error: error
    }, function (error) {
      return typeof callback === 'function' && callback(error);
    });
  } else {
    return typeof callback === 'function' && callback(error);
  }
}

Kareem.prototype.wrap = function (name, fn, context, args, options) {
  var lastArg = args.length > 0 ? args[args.length - 1] : null;
  var argsWithoutCb = Array.from(args);
  typeof lastArg === 'function' && argsWithoutCb.pop();

  var _this = this;

  options = options || {};
  var checkForPromise = options.checkForPromise;
  this.execPre(name, context, args, function (error) {
    if (error && !(error instanceof Kareem.skipWrappedFunction)) {
      var numCallbackParams = options.numCallbackParams || 0;
      var errorArgs = options.contextParameter ? [context] : [];

      for (var i = errorArgs.length; i < numCallbackParams; ++i) {
        errorArgs.push(null);
      }

      return _handleWrapError(_this, error, name, context, errorArgs, options, lastArg);
    }

    var numParameters = fn.length;
    var ret;

    if (error instanceof Kareem.skipWrappedFunction) {
      ret = error.args[0];
      return _cb.apply(void 0, [null].concat(_toConsumableArray(error.args)));
    } else {
      try {
        ret = fn.apply(context, argsWithoutCb.concat(_cb));
      } catch (err) {
        return _cb(err);
      }
    }

    if (checkForPromise) {
      if (isPromiseLike(ret)) {
        // Thenable, use it
        return ret.then(function (res) {
          return _cb(null, res);
        }, function (err) {
          return _cb(err);
        });
      } // If `fn()` doesn't have a callback argument and doesn't return a
      // promise, assume it is sync


      if (numParameters < argsWithoutCb.length + 1) {
        return _cb(null, ret);
      }
    }

    function _cb() {
      var argsWithoutError = Array.from(arguments);
      argsWithoutError.shift();

      if (options.nullResultByDefault && argsWithoutError.length === 0) {
        argsWithoutError.push(null);
      }

      if (arguments[0]) {
        // Assume error
        return _handleWrapError(_this, arguments[0], name, context, argsWithoutError, options, lastArg);
      } else {
        _this.execPost(name, context, argsWithoutError, function () {
          if (lastArg === null) {
            return;
          }

          arguments[0] ? lastArg(arguments[0]) : lastArg.apply(context, arguments);
        });
      }
    }
  });
};

Kareem.prototype.filter = function (fn) {
  var _this2 = this;

  var clone = this.clone();
  var pres = Array.from(clone._pres.keys());

  var _loop = function _loop() {
    var name = _pres[_i];

    var hooks = _this2._pres.get(name).map(function (h) {
      return Object.assign({}, h, {
        name: name
      });
    }).filter(fn);

    if (hooks.length === 0) {
      clone._pres["delete"](name);

      return "continue";
    }

    hooks.numAsync = hooks.filter(function (h) {
      return h.isAsync;
    }).length;

    clone._pres.set(name, hooks);
  };

  for (var _i = 0, _pres = pres; _i < _pres.length; _i++) {
    var _ret = _loop();

    if (_ret === "continue") continue;
  }

  var posts = Array.from(clone._posts.keys());

  var _loop2 = function _loop2() {
    var name = _posts[_i2];

    var hooks = _this2._posts.get(name).map(function (h) {
      return Object.assign({}, h, {
        name: name
      });
    }).filter(fn);

    if (hooks.length === 0) {
      clone._posts["delete"](name);

      return "continue";
    }

    clone._posts.set(name, hooks);
  };

  for (var _i2 = 0, _posts = posts; _i2 < _posts.length; _i2++) {
    var _ret2 = _loop2();

    if (_ret2 === "continue") continue;
  }

  return clone;
};

Kareem.prototype.hasHooks = function (name) {
  return this._pres.has(name) || this._posts.has(name);
};

Kareem.prototype.createWrapper = function (name, fn, context, options) {
  var _this = this;

  if (!this.hasHooks(name)) {
    // Fast path: if there's no hooks for this function, just return the
    // function wrapped in a nextTick()
    return function () {
      var _arguments = arguments,
          _this3 = this;

      nextTick(function () {
        return fn.apply(_this3, _arguments);
      });
    };
  }

  return function () {
    var _context = context || this;

    _this.wrap(name, fn, _context, Array.from(arguments), options);
  };
};

Kareem.prototype.pre = function (name, isAsync, fn, error, unshift) {
  var options = {};

  if (_typeof(isAsync) === 'object' && isAsync !== null) {
    options = isAsync;
    isAsync = options.isAsync;
  } else if (typeof arguments[1] !== 'boolean') {
    fn = isAsync;
    isAsync = false;
  }

  var pres = this._pres.get(name) || [];

  this._pres.set(name, pres);

  if (isAsync) {
    pres.numAsync = pres.numAsync || 0;
    ++pres.numAsync;
  }

  if (typeof fn !== 'function') {
    throw new Error('pre() requires a function, got "' + _typeof(fn) + '"');
  }

  if (unshift) {
    pres.unshift(Object.assign({}, options, {
      fn: fn,
      isAsync: isAsync
    }));
  } else {
    pres.push(Object.assign({}, options, {
      fn: fn,
      isAsync: isAsync
    }));
  }

  return this;
};

Kareem.prototype.post = function (name, options, fn, unshift) {
  var hooks = this._posts.get(name) || [];

  if (typeof options === 'function') {
    unshift = !!fn;
    fn = options;
    options = {};
  }

  if (typeof fn !== 'function') {
    throw new Error('post() requires a function, got "' + _typeof(fn) + '"');
  }

  if (unshift) {
    hooks.unshift(Object.assign({}, options, {
      fn: fn
    }));
  } else {
    hooks.push(Object.assign({}, options, {
      fn: fn
    }));
  }

  this._posts.set(name, hooks);

  return this;
};

Kareem.prototype.clone = function () {
  var n = new Kareem();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = this._pres.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      var clone = this._pres.get(key).slice();

      clone.numAsync = this._pres.get(key).numAsync;

      n._pres.set(key, clone);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = this._posts.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _key = _step2.value;

      n._posts.set(_key, this._posts.get(_key).slice());
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return n;
};

Kareem.prototype.merge = function (other, clone) {
  clone = arguments.length === 1 ? true : clone;
  var ret = clone ? this.clone() : this;
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    var _loop3 = function _loop3() {
      var key = _step3.value;
      var sourcePres = ret._pres.get(key) || [];

      var deduplicated = other._pres.get(key). // Deduplicate based on `fn`
      filter(function (p) {
        return sourcePres.map(function (_p) {
          return _p.fn;
        }).indexOf(p.fn) === -1;
      });

      var combined = sourcePres.concat(deduplicated);
      combined.numAsync = sourcePres.numAsync || 0;
      combined.numAsync += deduplicated.filter(function (p) {
        return p.isAsync;
      }).length;

      ret._pres.set(key, combined);
    };

    for (var _iterator3 = other._pres.keys()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      _loop3();
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    var _loop4 = function _loop4() {
      var key = _step4.value;
      var sourcePosts = ret._posts.get(key) || [];

      var deduplicated = other._posts.get(key).filter(function (p) {
        return sourcePosts.indexOf(p) === -1;
      });

      ret._posts.set(key, sourcePosts.concat(deduplicated));
    };

    for (var _iterator4 = other._posts.keys()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      _loop4();
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
        _iterator4["return"]();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  return ret;
};

function callMiddlewareFunction(fn, context, args, next) {
  var maybePromiseLike;

  try {
    maybePromiseLike = fn.apply(context, args);
  } catch (error) {
    return next(error);
  }

  if (isPromiseLike(maybePromiseLike)) {
    maybePromiseLike.then(function () {
      return next();
    }, function (err) {
      return next(err);
    });
  }
}

function isPromiseLike(v) {
  return _typeof(v) === 'object' && v !== null && typeof v.then === 'function';
}

function decorateNextFn(fn) {
  var called = false;

  var _this = this;

  return function () {
    var _arguments2 = arguments;

    // Ensure this function can only be called once
    if (called) {
      return;
    }

    called = true; // Make sure to clear the stack so try/catch doesn't catch errors
    // in subsequent middleware

    return nextTick(function () {
      return fn.apply(_this, _arguments2);
    });
  };
}

var nextTick = (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process !== null && process.nextTick || function nextTick(cb) {
  setTimeout(cb, 0);
};

module.exports = Kareem;